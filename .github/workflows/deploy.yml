name: Build and Deploy to Kubernetes

  on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build'
        required: true
        default: 'master'
        type: choice
        options:
          - master
          - dev
      k8s_context:
        description: 'Kubernetes context/server to deploy to'
        required: true
        default: 'vps-cluster'
        type: choice
        options:
          - vps_kub
          - local_kub

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/tts_ci_git/myapp:${{ github.sha }} .
<<<<<<< HEAD

=======
      
>>>>>>> 8560dddaef0a2e797f5cf258e82cc0d791988719
      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/tts_ci_git/myapp:${{ github.sha }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubeconfig
        run: |
          if [ "${{ github.event.inputs.k8s_context }}" == "vps_kub" ]; then
            echo "${{ secrets.KUBE_CONFIG_DEV }}" > kubeconfig
          elif [ "${{ github.event.inputs.k8s_context }}" == "local_kub" ]; then
            echo "${{ secrets.KUBE_CONFIG_STAGING }}" > kubeconfig
          else
            echo "Unknown context: ${{ github.event.inputs.k8s_context }}"
            exit 1
          fi
          export KUBECONFIG=$PWD/kubeconfig

      - name: Deploy to Kubernetes
<<<<<<< HEAD
        run: |
          kubectl set image deployment/myapp myapp=ghcr.io/${{ github.repository_owner }}/tts_ci_git/myapp:${{ github.sha }} -n default
          if ! kubectl get deployment myapp -n default &> /dev/null; then
            echo "Deployment 'myapp' not found in namespace 'default'. Creating a basic one? (Add logic if needed)"
            exit 1
          fi
          kubectl rollout status deployment/myapp -n default --timeout=300s

=======
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        run: |
          echo "$KUBECONFIG_DATA" > kubeconfig
          export KUBECONFIG=$(pwd)/kubeconfig
          kubectl set image deployment/myapp myapp=ghcr.io/${{ github.repository_owner }}/tts_ci_git/myapp:${{ github.sha }} -n default
          kubectl rollout status deployment/myapp -n default --timeout=300s
>>>>>>> 8560dddaef0a2e797f5cf258e82cc0d791988719
